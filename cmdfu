#!/bin/bash -e
# @file cmdfu
# @brief Queries commandlinefu.com
# @description
# Queries https://commandlinefu.com and presents the user with a list from which she can select a command. Alternatively one can display/download the content to a file.
#
# Usage: `cmdlfu -t -d <search_string>`
#
#    * -d display full context, no selection
#    * -p show text file instead json
#    * -t show results tagged with <search_string>
#    * -r displays random commands in json, or as text using -t
#
# Below you see the internal functions used, they can also be called separately. However the script actually presents the found commands in a searchable list using fzf.
set -eo pipefail

### Variables - start
DEBUG=0
ERR_MSG="ERROR, please check log"
### Variables - end

### Main functions - start
trap 'ret=$?; printf "%s\n" "$ERR_MSG" >&2; exit "$ret"' ERR

# @description print error message in case the function dies unexpectedly
# @arg $1 string error message to display
# @internal
die() {
    echo -e "$*" 1>&2 ; exit 1; 
}

# @description Print a help message.
# @arg $0 string name of the binary
# @internal
usage() {
   cat <<END
Queries https://commandlinefu.com and presents the user with a list from which she can select a command. Alternatively one can display/download the content to a file.

Usage: $0 -tdr <search_string>
     -d display full context, no selection
     -p show plaintext file instead json
     -r displays random commands in json, or as text using -t
END
}

# @description Print usage message and exit with 1
# @noargs
# @exitcode 1 Always
# @internal
exit_abnormal() {
   usage
   exit 1
}

# @description Helper function to separate output with a given character
# @arg $1 string (optional) character for separation, default is `-`
# @arg $2 int (optional) how much characters to print, default is 80
# @internal
text_separator() {
   ch="-"
   len="80"
   if [ "$#" -eq 2 ]; then
      ch=$1
   elif [ "$#" -gt 2 ]; then
      ch=$1
      len=$2
   fi 
   printf '%*s\n' "$len" | tr ' ' "$ch"
}

# @description Helper function to check if a given tool is installed, otherwise die
# @arg $1 string name of the binary
# @arg $2 string additional text to the error message (e.g. where to download)
# @internal
need() {
   which "$1" &>/dev/null || die "Binary '$1' is missing but required\n$2"
}

### Main Functions - end
baseurl="https://www.commandlinefu.com/commands/"

### Custom Functions - start
# @description get random command
# @internal
# @noargs
cmdfu_random() {
   if [ "$pflag" == "1" ]; then
      curl -sL "$baseurl/random/plaintext" | grep -v "^# commandlinefu"
   else
      curl -sL "$baseurl/random/json" | grep -v "^# commandlinefu"
   fi
}

# @description get commands tagged with given string
# @internal
# @arg $@ string tag to search for
cmdfu_tag() {
   if [ "$pflag" == "1" ]; then
      curl -s "$baseurl/tagged/163/$@/plaintext"
   else
      curl -s "$baseurl/tagged/163/$@/json"
   fi
}

# @description get commands with given string
# @internal
# @arg $@ string string to search for
cmdfu_search() {
   if [ "$pflag" == "1" ]; then
      curl -s "$baseurl/matching/$search_string/$(echo -n $search_string | openssl base64)/plaintext" > $filename
   else
      curl -s "$baseurl/matching/$search_string/$(echo -n $search_string | openssl base64)/json" > $filename
   fi
}

# @description find a CommandlineFu users average command rating
# @arg $1 string username of user
function cmdfu_rating()
{
   curl -s "$baseurl/by/$1" | awk -F\> '/class="num-votes"/{S+=$2; I++}END{print S/I}'
}

# Prepare a commandlinefu command
function goclf()
{
   type "$1" | sed '1d' | tr -d "\n" | tr -s '[:space:]'; echo
}

### Custom Functions - end
dflag="0"
tflag="0"
pflag="0"
rflag="0"

### Check for required tools
need "jq"
need "fzf"

### Read arguments
parsed_options=$(getopt -n "$0" -o hdrpt -- "$@")
eval "set -- $parsed_options"
while [ "$#" -gt 0 ]; do
      case $1 in
         (-d)
            dflag="1"
            shift
         ;;
         (-r)
            rflag="1"
            shift
         ;;
         (-p)
            pflag="1"
            shift
         ;;
         (-t)
            tflag="1"
            shift
         ;;
         (-h) exit_abnormal;;
         (--)
            shift
            break
         ;;
         (*) exit_abnormal;;
    esac
done

### Main Script
TARGET_FOLDER="$HOME/.local/cmdlfu"

if [ ! -d $TARGET_FOLDER ]; then
   mkdir $TARGET_FOLDER
fi

search_string=$*

if [ "$rflag" == "1" ]; then
   if [ "$pflag" == "1" ]; then
      filename="$TARGET_FOLDER/cmdfu_random.txt"
      cmdfu_random > $filename
   else
      filename="$TARGET_FOLDER/cmdfu_random.json"
      cmdfu_random > $filename
   fi
elif [ "$tflag" == "1" ]; then
   if [ "$pflag" == "1" ] ; then
      filename="$TARGET_FOLDER/tag_$search_string.txt"
      cmdfu_tag $search_string > $filename
   else
      filename="$TARGET_FOLDER/tag_$search_string.json"
      cmdfu_tag $search_string > $filename
   fi
elif [ "$pflag" == "1" ] ; then
   filename="$TARGET_FOLDER/$search_string.txt"
   cmdfu_search $search_string > $filename
else
   filename="$TARGET_FOLDER/$search_string.json"
   cmdfu_search $search_string > $filename
fi

if [ "$dflag" == "1" ] || [ "$pflag" == "1" ]; then
   cat $filename
else
   jq -r '.[] | .summary +"\t"+  .command ' "$filename" | fzf -d $'\t' --nth=1 --with-nth=1 --preview "echo {2}" --preview-window=down | cut -d$'\t' -f2
fi