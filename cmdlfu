#!/bin/bash -e
# @file cmdfu
# @brief Queries commandlinefu.com
# @description
# Queries https://commandlinefu.com and presents the user with a list from which she can select a command. Alternatively one can display/download the content to a file.
#
# Usage: `cmdlfu -t -d <search_string>``
#     -d display full context, no selection
#     -t show text file instead json
#
# Below you see the internal functions used, they can also be called separately. However the script actually presents the found commands in a searchable list using fzf.
set -eo pipefail

### Variables - start
DEBUG=0
ERR_MSG="ERROR, please check log"
### Variables - end

### Main functions - start
trap 'ret=$?; printf "%s\n" "$ERR_MSG" >&2; exit "$ret"' ERR

# @description print error message in case the function dies unexpectedly
# @arg $1 string error message to display
# @internal
die() {
    echo -e "$*" 1>&2 ; exit 1; 
}

# @description Print a help message.
# @arg $0 string name of the binary
# @internal
usage() {
   cat <<END
Queries https://commandlinefu.com and presents the user with a list from which she can select a command. Alternatively one can display/download the content to a file.

Usage: $0 -t -d
     -d display full context, no selection
     -t show text file instead json
END
}

# @description Print usage message and exit with 1
# @noargs
# @exitcode 1 Always
# @internal
exit_abnormal() {
   usage
   exit 1
}

# @description Helper function to separate output with a given character
# @arg $1 string (optional) character for separation, default is `-`
# @arg $2 int (optional) how much characters to print, default is 80
# @internal
text_separator() {
   ch="-"
   len="80"
   if [ "$#" -eq 2 ]; then
      ch=$1
   elif [ "$#" -gt 2 ]; then
      ch=$1
      len=$2
   fi 
   printf '%*s\n' "$len" | tr ' ' "$ch"
}

# @description Helper function to check if a given tool is installed, otherwise die
# @arg $1 string name of the binary
# @arg $2 string additional text to the error message (e.g. where to download)
# @internal
need() {
   which "$1" &>/dev/null || die "Binary '$1' is missing but required\n$2"
}

### Main Functions - end

### Custom Functions - start
baseurl="https://www.commandlinefu.com/commands/"

# @description Search commandlinefu.com from the command line using the API and returns text output
# @arg $1 string text to search
function cmdfu() { 
   curl -s "$baseurl/matching/$@/$(echo -n $@ | openssl base64)/plaintext"; 
}

# @description Search commandlinefu.com from the command line using the API and returns json output
# @arg $1 string text to search
function cmdfuj() { 
   curl -s "$baseurl/matching/$@/$(echo -n $@ | openssl base64)/json" ; 
}

# @description automatically downloads all commands from http://www.commandlinefu.com into a single text file
# @ noargs
alias cmdfu_dl='mkdir /tmp/commandlinefu && cd /tmp/commandlinefu && curl -O http://www.commandlinefu.com/commands/browse/sort-by-votes/plaintext/[0-2400:25] && ls -1 | sort -n | while read mork ; do cat $mork >> commandlinefu.txt ; ls -ald $mork; done && mv commandlinefu.txt $HOME && rm -rf /tmp/commandlinefu'

# @description find a CommandlineFu users average command rating
# @arg $1 string username of user
function cmdfu_rating()
{
   curl -s "$baseurl/by/$1" | awk -F\> '/class="num-votes"/{S+=$2; I++}END{print S/I}'
}

# @description fuman, an alternative to the 'man' command that shows commandlinefu.com examples
# @arg $1 string command
function fuman() {
   lynx -width=$COLUMNS -nonumbers -dump "$basurl/using/$1" |sed '/Add to favourites/,/This is sample output/!d' |sed 's/ *Add to favourites/----/' |less -r; 
}

# @description Random Commandlinefu command
# @noargs
function fur() { 
   curl -sL "$baseurl/random/plaintext" | grep -v "^# commandlinefu" ; 
}

# Prepare a commandlinefu command
function goclf()
{
   type "$1" | sed '1d' | tr -d "\n" | tr -s '[:space:]'; echo
}

### Custom Functions - end
dflag="0"
tflag="0"

### Check for required tools
need "jq"
need "fzf"

### Read arguments
parsed_options=$(getopt -n "$0" -o hdt -- "$@")
eval "set -- $parsed_options"
while [ "$#" -gt 0 ]; do
      case $1 in
         (-d)
            dflag="1"
            shift
         ;;
         (-t)
            tflag="1"
            shift
         ;;
         (-h) exit_abnormal;;
         (--)
            shift
            break
         ;;
         (*) exit_abnormal;;
    esac
done

### Main Script
TARGET_FOLDER="$HOME/.local/cmdlfu"

if [ ! -d $TARGET_FOLDER ]; then
   mkdir $TARGET_FOLDER
fi

if [ "$dflag" = "1" ] || [ "$tflag" = "1" ] ; then
   cmdfu $*
else
   filename="$TARGET_FOLDER/$*.json"
   echo $filename
   cmdfuj $* > $filename
   jq -r '.[] | .summary +"\t"+  .command ' "$filename" | fzf -d $'\t' --nth=1 --with-nth=1 --preview "echo {2}" --preview-window=down | cut -d$'\t' -f2
fi